// Code generated by ent, DO NOT EDIT.

package card

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/danielmoisa/ecommerce-microservices/app/user/service/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldName, v))
}

// CardNo applies equality check predicate on the "card_no" field. It's identical to CardNoEQ.
func CardNo(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCardNo, v))
}

// Ccv applies equality check predicate on the "ccv" field. It's identical to CcvEQ.
func Ccv(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCcv, v))
}

// Expires applies equality check predicate on the "expires" field. It's identical to ExpiresEQ.
func Expires(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldExpires, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Card {
	return predicate.Card(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Card {
	return predicate.Card(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Card {
	return predicate.Card(sql.FieldContainsFold(FieldName, v))
}

// CardNoEQ applies the EQ predicate on the "card_no" field.
func CardNoEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCardNo, v))
}

// CardNoNEQ applies the NEQ predicate on the "card_no" field.
func CardNoNEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldCardNo, v))
}

// CardNoIn applies the In predicate on the "card_no" field.
func CardNoIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldCardNo, vs...))
}

// CardNoNotIn applies the NotIn predicate on the "card_no" field.
func CardNoNotIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldCardNo, vs...))
}

// CardNoGT applies the GT predicate on the "card_no" field.
func CardNoGT(v string) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldCardNo, v))
}

// CardNoGTE applies the GTE predicate on the "card_no" field.
func CardNoGTE(v string) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldCardNo, v))
}

// CardNoLT applies the LT predicate on the "card_no" field.
func CardNoLT(v string) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldCardNo, v))
}

// CardNoLTE applies the LTE predicate on the "card_no" field.
func CardNoLTE(v string) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldCardNo, v))
}

// CardNoContains applies the Contains predicate on the "card_no" field.
func CardNoContains(v string) predicate.Card {
	return predicate.Card(sql.FieldContains(FieldCardNo, v))
}

// CardNoHasPrefix applies the HasPrefix predicate on the "card_no" field.
func CardNoHasPrefix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasPrefix(FieldCardNo, v))
}

// CardNoHasSuffix applies the HasSuffix predicate on the "card_no" field.
func CardNoHasSuffix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasSuffix(FieldCardNo, v))
}

// CardNoEqualFold applies the EqualFold predicate on the "card_no" field.
func CardNoEqualFold(v string) predicate.Card {
	return predicate.Card(sql.FieldEqualFold(FieldCardNo, v))
}

// CardNoContainsFold applies the ContainsFold predicate on the "card_no" field.
func CardNoContainsFold(v string) predicate.Card {
	return predicate.Card(sql.FieldContainsFold(FieldCardNo, v))
}

// CcvEQ applies the EQ predicate on the "ccv" field.
func CcvEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCcv, v))
}

// CcvNEQ applies the NEQ predicate on the "ccv" field.
func CcvNEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldCcv, v))
}

// CcvIn applies the In predicate on the "ccv" field.
func CcvIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldCcv, vs...))
}

// CcvNotIn applies the NotIn predicate on the "ccv" field.
func CcvNotIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldCcv, vs...))
}

// CcvGT applies the GT predicate on the "ccv" field.
func CcvGT(v string) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldCcv, v))
}

// CcvGTE applies the GTE predicate on the "ccv" field.
func CcvGTE(v string) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldCcv, v))
}

// CcvLT applies the LT predicate on the "ccv" field.
func CcvLT(v string) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldCcv, v))
}

// CcvLTE applies the LTE predicate on the "ccv" field.
func CcvLTE(v string) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldCcv, v))
}

// CcvContains applies the Contains predicate on the "ccv" field.
func CcvContains(v string) predicate.Card {
	return predicate.Card(sql.FieldContains(FieldCcv, v))
}

// CcvHasPrefix applies the HasPrefix predicate on the "ccv" field.
func CcvHasPrefix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasPrefix(FieldCcv, v))
}

// CcvHasSuffix applies the HasSuffix predicate on the "ccv" field.
func CcvHasSuffix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasSuffix(FieldCcv, v))
}

// CcvEqualFold applies the EqualFold predicate on the "ccv" field.
func CcvEqualFold(v string) predicate.Card {
	return predicate.Card(sql.FieldEqualFold(FieldCcv, v))
}

// CcvContainsFold applies the ContainsFold predicate on the "ccv" field.
func CcvContainsFold(v string) predicate.Card {
	return predicate.Card(sql.FieldContainsFold(FieldCcv, v))
}

// ExpiresEQ applies the EQ predicate on the "expires" field.
func ExpiresEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldExpires, v))
}

// ExpiresNEQ applies the NEQ predicate on the "expires" field.
func ExpiresNEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldExpires, v))
}

// ExpiresIn applies the In predicate on the "expires" field.
func ExpiresIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldExpires, vs...))
}

// ExpiresNotIn applies the NotIn predicate on the "expires" field.
func ExpiresNotIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldExpires, vs...))
}

// ExpiresGT applies the GT predicate on the "expires" field.
func ExpiresGT(v string) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldExpires, v))
}

// ExpiresGTE applies the GTE predicate on the "expires" field.
func ExpiresGTE(v string) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldExpires, v))
}

// ExpiresLT applies the LT predicate on the "expires" field.
func ExpiresLT(v string) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldExpires, v))
}

// ExpiresLTE applies the LTE predicate on the "expires" field.
func ExpiresLTE(v string) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldExpires, v))
}

// ExpiresContains applies the Contains predicate on the "expires" field.
func ExpiresContains(v string) predicate.Card {
	return predicate.Card(sql.FieldContains(FieldExpires, v))
}

// ExpiresHasPrefix applies the HasPrefix predicate on the "expires" field.
func ExpiresHasPrefix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasPrefix(FieldExpires, v))
}

// ExpiresHasSuffix applies the HasSuffix predicate on the "expires" field.
func ExpiresHasSuffix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasSuffix(FieldExpires, v))
}

// ExpiresEqualFold applies the EqualFold predicate on the "expires" field.
func ExpiresEqualFold(v string) predicate.Card {
	return predicate.Card(sql.FieldEqualFold(FieldExpires, v))
}

// ExpiresContainsFold applies the ContainsFold predicate on the "expires" field.
func ExpiresContainsFold(v string) predicate.Card {
	return predicate.Card(sql.FieldContainsFold(FieldExpires, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Card) predicate.Card {
	return predicate.Card(sql.NotPredicates(p))
}
