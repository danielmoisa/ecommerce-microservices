// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: v1/shop_admin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShopAdminCreateProduct = "/shop.admin.v1.ShopAdmin/CreateProduct"
const OperationShopAdminDeleteProduct = "/shop.admin.v1.ShopAdmin/DeleteProduct"
const OperationShopAdminGetOrder = "/shop.admin.v1.ShopAdmin/GetOrder"
const OperationShopAdminGetUser = "/shop.admin.v1.ShopAdmin/GetUser"
const OperationShopAdminListOrder = "/shop.admin.v1.ShopAdmin/ListOrder"
const OperationShopAdminListProduct = "/shop.admin.v1.ShopAdmin/ListProduct"
const OperationShopAdminListUser = "/shop.admin.v1.ShopAdmin/ListUser"
const OperationShopAdminLogin = "/shop.admin.v1.ShopAdmin/Login"
const OperationShopAdminLogout = "/shop.admin.v1.ShopAdmin/Logout"
const OperationShopAdminUpdateProduct = "/shop.admin.v1.ShopAdmin/UpdateProduct"

type ShopAdminHTTPServer interface {
	CreateProduct(context.Context, *CreateProductReq) (*CreateProductReply, error)
	DeleteProduct(context.Context, *DeleteProductReq) (*DeleteProductReply, error)
	GetOrder(context.Context, *GetOrderReq) (*GetOrderReply, error)
	GetUser(context.Context, *GetUserReq) (*GetUserReply, error)
	ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error)
	ListProduct(context.Context, *ListProductReq) (*ListProductReply, error)
	ListUser(context.Context, *ListUserReq) (*ListUserReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	UpdateProduct(context.Context, *UpdateProductReq) (*UpdateProductReply, error)
}

func RegisterShopAdminHTTPServer(s *http.Server, srv ShopAdminHTTPServer) {
	r := s.Route("/")
	r.POST("/admin/v1/login", _ShopAdmin_Login0_HTTP_Handler(srv))
	r.POST("/admin/v1/logout", _ShopAdmin_Logout0_HTTP_Handler(srv))
	r.GET("/admin/v1/catalog/products", _ShopAdmin_ListProduct0_HTTP_Handler(srv))
	r.POST("/admin/v1/catalog/products", _ShopAdmin_CreateProduct0_HTTP_Handler(srv))
	r.PUT("/admin/v1/catalog/products/{id}", _ShopAdmin_UpdateProduct0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/catalog/products/{id}", _ShopAdmin_DeleteProduct0_HTTP_Handler(srv))
	r.GET("/admin/v1/orders", _ShopAdmin_ListOrder0_HTTP_Handler(srv))
	r.GET("/admin/v1/orders", _ShopAdmin_GetOrder0_HTTP_Handler(srv))
	r.GET("/admin/v1/users", _ShopAdmin_ListUser0_HTTP_Handler(srv))
	r.GET("/admin/v1/users/{id}", _ShopAdmin_GetUser0_HTTP_Handler(srv))
}

func _ShopAdmin_Login0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_Logout0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_ListProduct0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProductReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminListProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProduct(ctx, req.(*ListProductReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProductReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_CreateProduct0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateProductReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminCreateProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProduct(ctx, req.(*CreateProductReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateProductReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_UpdateProduct0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProductReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminUpdateProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProduct(ctx, req.(*UpdateProductReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateProductReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_DeleteProduct0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProductReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminDeleteProduct)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProduct(ctx, req.(*DeleteProductReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteProductReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_ListOrder0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOrderReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminListOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrder(ctx, req.(*ListOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOrderReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_GetOrder0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrderReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminGetOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrder(ctx, req.(*GetOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOrderReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_ListUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminListUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*ListUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_GetUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

type ShopAdminHTTPClient interface {
	CreateProduct(ctx context.Context, req *CreateProductReq, opts ...http.CallOption) (rsp *CreateProductReply, err error)
	DeleteProduct(ctx context.Context, req *DeleteProductReq, opts ...http.CallOption) (rsp *DeleteProductReply, err error)
	GetOrder(ctx context.Context, req *GetOrderReq, opts ...http.CallOption) (rsp *GetOrderReply, err error)
	GetUser(ctx context.Context, req *GetUserReq, opts ...http.CallOption) (rsp *GetUserReply, err error)
	ListOrder(ctx context.Context, req *ListOrderReq, opts ...http.CallOption) (rsp *ListOrderReply, err error)
	ListProduct(ctx context.Context, req *ListProductReq, opts ...http.CallOption) (rsp *ListProductReply, err error)
	ListUser(ctx context.Context, req *ListUserReq, opts ...http.CallOption) (rsp *ListUserReply, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutReq, opts ...http.CallOption) (rsp *LogoutReply, err error)
	UpdateProduct(ctx context.Context, req *UpdateProductReq, opts ...http.CallOption) (rsp *UpdateProductReply, err error)
}

type ShopAdminHTTPClientImpl struct {
	cc *http.Client
}

func NewShopAdminHTTPClient(client *http.Client) ShopAdminHTTPClient {
	return &ShopAdminHTTPClientImpl{client}
}

func (c *ShopAdminHTTPClientImpl) CreateProduct(ctx context.Context, in *CreateProductReq, opts ...http.CallOption) (*CreateProductReply, error) {
	var out CreateProductReply
	pattern := "/admin/v1/catalog/products"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminCreateProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopAdminHTTPClientImpl) DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...http.CallOption) (*DeleteProductReply, error) {
	var out DeleteProductReply
	pattern := "/admin/v1/catalog/products/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminDeleteProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopAdminHTTPClientImpl) GetOrder(ctx context.Context, in *GetOrderReq, opts ...http.CallOption) (*GetOrderReply, error) {
	var out GetOrderReply
	pattern := "/admin/v1/orders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminGetOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopAdminHTTPClientImpl) GetUser(ctx context.Context, in *GetUserReq, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/admin/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopAdminHTTPClientImpl) ListOrder(ctx context.Context, in *ListOrderReq, opts ...http.CallOption) (*ListOrderReply, error) {
	var out ListOrderReply
	pattern := "/admin/v1/orders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminListOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopAdminHTTPClientImpl) ListProduct(ctx context.Context, in *ListProductReq, opts ...http.CallOption) (*ListProductReply, error) {
	var out ListProductReply
	pattern := "/admin/v1/catalog/products"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminListProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopAdminHTTPClientImpl) ListUser(ctx context.Context, in *ListUserReq, opts ...http.CallOption) (*ListUserReply, error) {
	var out ListUserReply
	pattern := "/admin/v1/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopAdminHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/admin/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopAdminHTTPClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/admin/v1/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShopAdminHTTPClientImpl) UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...http.CallOption) (*UpdateProductReply, error) {
	var out UpdateProductReply
	pattern := "/admin/v1/catalog/products/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminUpdateProduct))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
